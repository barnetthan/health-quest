rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User stats access
    match /userStats/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Group access
    match /groups/{groupId} {
      // Anyone authenticated can read groups
      allow read: if request.auth != null;
      
      // Allow create if authenticated
      allow create: if request.auth != null;
      
      // Allow update if:
      // 1. User is authenticated AND
      // 2. Either:
      //    a. User is the creator of the group OR
      //    b. User is joining the group (only updating members array)
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['members', 'updatedAt']) &&
          request.resource.data.members.hasAll(resource.data.members) &&
          request.resource.data.members.size() == resource.data.members.size() + 1 &&
          request.auth.uid in request.resource.data.members
        )
      );
      
      // Only group creator can delete
      allow delete: if request.auth != null && 
                     request.auth.uid == resource.data.createdBy;
    }
    
    // Health stats access
    match /healthStats/{statId} {
      // Allow read if you're a member of the group
      allow read: if request.auth != null && 
                   exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                   request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      
      // Allow write only to your own stats
      allow write: if request.auth != null && 
                    resource.data.userId == request.auth.uid;
    }
    
    // Goals access
    match /goals/{goalId} {
      // Allow read if you're a member of the group
      allow read: if request.auth != null && 
                   exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                   request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      
      // Allow create if you're a member of the group
      allow create: if request.auth != null && 
                     exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.members;
      
      // Allow update if you're a member of the group
      allow update: if request.auth != null && 
                     exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      
      // Allow delete if you're the creator of the goal or a member of the group
      allow delete: if request.auth != null && 
                     (request.auth.uid == resource.data.userId ||
                      request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members);
    }
    
    // Group invites access
    match /groupInvites/{inviteId} {
      allow read: if request.auth != null && 
                   (resource.data.invitedUserId == request.auth.uid || 
                    request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members);
      
      allow create: if request.auth != null && 
                     exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.members;
      
      allow update: if request.auth != null && 
                     resource.data.invitedUserId == request.auth.uid;
      
      allow delete: if request.auth != null && 
                     (resource.data.invitedUserId == request.auth.uid || 
                      request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members);
    }
  }
}